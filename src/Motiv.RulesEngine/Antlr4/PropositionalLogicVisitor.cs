//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Dev/logical-motiv/libs/motiv-editor-react/src/lib/antlr/PropositionalLogic.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="PropositionalLogicParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public interface IPropositionalLogicVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="PropositionalLogicParser.formula"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFormula([NotNull] PropositionalLogicParser.FormulaContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="PropositionalLogicParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpression([NotNull] PropositionalLogicParser.ExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="PropositionalLogicParser.conditionalOrExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConditionalOrExpression([NotNull] PropositionalLogicParser.ConditionalOrExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="PropositionalLogicParser.conditionalAndExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConditionalAndExpression([NotNull] PropositionalLogicParser.ConditionalAndExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="PropositionalLogicParser.orExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitOrExpression([NotNull] PropositionalLogicParser.OrExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="PropositionalLogicParser.xorExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitXorExpression([NotNull] PropositionalLogicParser.XorExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="PropositionalLogicParser.andExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAndExpression([NotNull] PropositionalLogicParser.AndExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="PropositionalLogicParser.notExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNotExpression([NotNull] PropositionalLogicParser.NotExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="PropositionalLogicParser.proposition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitProposition([NotNull] PropositionalLogicParser.PropositionContext context);
}
