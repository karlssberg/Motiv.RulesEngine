//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Dev/logical-motiv/libs/motiv-editor-react/src/lib/antlr/PropositionalLogic.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class PropositionalLogicParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		PROPOSITION=1, PARAMETER=2, AND_ALSO=3, OR_ELSE=4, AND=5, OR=6, NOT=7, 
		XOR=8, LPAREN=9, RPAREN=10, IDENTIFIER_SEGMENT_START=11, IDENTIFIER_SEGMENT=12, 
		WS=13;
	public const int
		RULE_formula = 0, RULE_expression = 1, RULE_conditionalOrExpression = 2, 
		RULE_conditionalAndExpression = 3, RULE_orExpression = 4, RULE_xorExpression = 5, 
		RULE_andExpression = 6, RULE_notExpression = 7, RULE_proposition = 8;
	public static readonly string[] ruleNames = {
		"formula", "expression", "conditionalOrExpression", "conditionalAndExpression", 
		"orExpression", "xorExpression", "andExpression", "notExpression", "proposition"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'&&'", "'||'", "'&'", "'|'", "'!'", "'^'", "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "PROPOSITION", "PARAMETER", "AND_ALSO", "OR_ELSE", "AND", "OR", 
		"NOT", "XOR", "LPAREN", "RPAREN", "IDENTIFIER_SEGMENT_START", "IDENTIFIER_SEGMENT", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PropositionalLogic.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static PropositionalLogicParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public PropositionalLogicParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public PropositionalLogicParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FormulaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(PropositionalLogicParser.Eof, 0); }
		public FormulaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formula; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPropositionalLogicListener typedListener = listener as IPropositionalLogicListener;
			if (typedListener != null) typedListener.EnterFormula(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPropositionalLogicListener typedListener = listener as IPropositionalLogicListener;
			if (typedListener != null) typedListener.ExitFormula(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPropositionalLogicVisitor<TResult> typedVisitor = visitor as IPropositionalLogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormula(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormulaContext formula() {
		FormulaContext _localctx = new FormulaContext(Context, State);
		EnterRule(_localctx, 0, RULE_formula);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 18;
			expression();
			State = 19;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalOrExpressionContext conditionalOrExpression() {
			return GetRuleContext<ConditionalOrExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPropositionalLogicListener typedListener = listener as IPropositionalLogicListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPropositionalLogicListener typedListener = listener as IPropositionalLogicListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPropositionalLogicVisitor<TResult> typedVisitor = visitor as IPropositionalLogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 2, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 21;
			conditionalOrExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalOrExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalAndExpressionContext[] conditionalAndExpression() {
			return GetRuleContexts<ConditionalAndExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalAndExpressionContext conditionalAndExpression(int i) {
			return GetRuleContext<ConditionalAndExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR_ELSE() { return GetTokens(PropositionalLogicParser.OR_ELSE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR_ELSE(int i) {
			return GetToken(PropositionalLogicParser.OR_ELSE, i);
		}
		public ConditionalOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalOrExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPropositionalLogicListener typedListener = listener as IPropositionalLogicListener;
			if (typedListener != null) typedListener.EnterConditionalOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPropositionalLogicListener typedListener = listener as IPropositionalLogicListener;
			if (typedListener != null) typedListener.ExitConditionalOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPropositionalLogicVisitor<TResult> typedVisitor = visitor as IPropositionalLogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalOrExpressionContext conditionalOrExpression() {
		ConditionalOrExpressionContext _localctx = new ConditionalOrExpressionContext(Context, State);
		EnterRule(_localctx, 4, RULE_conditionalOrExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 23;
			conditionalAndExpression();
			State = 28;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR_ELSE) {
				{
				{
				State = 24;
				Match(OR_ELSE);
				State = 25;
				conditionalAndExpression();
				}
				}
				State = 30;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalAndExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OrExpressionContext[] orExpression() {
			return GetRuleContexts<OrExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrExpressionContext orExpression(int i) {
			return GetRuleContext<OrExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND_ALSO() { return GetTokens(PropositionalLogicParser.AND_ALSO); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_ALSO(int i) {
			return GetToken(PropositionalLogicParser.AND_ALSO, i);
		}
		public ConditionalAndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalAndExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPropositionalLogicListener typedListener = listener as IPropositionalLogicListener;
			if (typedListener != null) typedListener.EnterConditionalAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPropositionalLogicListener typedListener = listener as IPropositionalLogicListener;
			if (typedListener != null) typedListener.ExitConditionalAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPropositionalLogicVisitor<TResult> typedVisitor = visitor as IPropositionalLogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalAndExpressionContext conditionalAndExpression() {
		ConditionalAndExpressionContext _localctx = new ConditionalAndExpressionContext(Context, State);
		EnterRule(_localctx, 6, RULE_conditionalAndExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 31;
			orExpression();
			State = 36;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AND_ALSO) {
				{
				{
				State = 32;
				Match(AND_ALSO);
				State = 33;
				orExpression();
				}
				}
				State = 38;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public XorExpressionContext[] xorExpression() {
			return GetRuleContexts<XorExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public XorExpressionContext xorExpression(int i) {
			return GetRuleContext<XorExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(PropositionalLogicParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(PropositionalLogicParser.OR, i);
		}
		public OrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPropositionalLogicListener typedListener = listener as IPropositionalLogicListener;
			if (typedListener != null) typedListener.EnterOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPropositionalLogicListener typedListener = listener as IPropositionalLogicListener;
			if (typedListener != null) typedListener.ExitOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPropositionalLogicVisitor<TResult> typedVisitor = visitor as IPropositionalLogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrExpressionContext orExpression() {
		OrExpressionContext _localctx = new OrExpressionContext(Context, State);
		EnterRule(_localctx, 8, RULE_orExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39;
			xorExpression();
			State = 44;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 40;
				Match(OR);
				State = 41;
				xorExpression();
				}
				}
				State = 46;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XorExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AndExpressionContext[] andExpression() {
			return GetRuleContexts<AndExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AndExpressionContext andExpression(int i) {
			return GetRuleContext<AndExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] XOR() { return GetTokens(PropositionalLogicParser.XOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR(int i) {
			return GetToken(PropositionalLogicParser.XOR, i);
		}
		public XorExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xorExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPropositionalLogicListener typedListener = listener as IPropositionalLogicListener;
			if (typedListener != null) typedListener.EnterXorExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPropositionalLogicListener typedListener = listener as IPropositionalLogicListener;
			if (typedListener != null) typedListener.ExitXorExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPropositionalLogicVisitor<TResult> typedVisitor = visitor as IPropositionalLogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XorExpressionContext xorExpression() {
		XorExpressionContext _localctx = new XorExpressionContext(Context, State);
		EnterRule(_localctx, 10, RULE_xorExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47;
			andExpression();
			State = 52;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==XOR) {
				{
				{
				State = 48;
				Match(XOR);
				State = 49;
				andExpression();
				}
				}
				State = 54;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NotExpressionContext[] notExpression() {
			return GetRuleContexts<NotExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NotExpressionContext notExpression(int i) {
			return GetRuleContext<NotExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(PropositionalLogicParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(PropositionalLogicParser.AND, i);
		}
		public AndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPropositionalLogicListener typedListener = listener as IPropositionalLogicListener;
			if (typedListener != null) typedListener.EnterAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPropositionalLogicListener typedListener = listener as IPropositionalLogicListener;
			if (typedListener != null) typedListener.ExitAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPropositionalLogicVisitor<TResult> typedVisitor = visitor as IPropositionalLogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndExpressionContext andExpression() {
		AndExpressionContext _localctx = new AndExpressionContext(Context, State);
		EnterRule(_localctx, 12, RULE_andExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55;
			notExpression();
			State = 60;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AND) {
				{
				{
				State = 56;
				Match(AND);
				State = 57;
				notExpression();
				}
				}
				State = 62;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PropositionalLogicParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NotExpressionContext notExpression() {
			return GetRuleContext<NotExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(PropositionalLogicParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(PropositionalLogicParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropositionContext proposition() {
			return GetRuleContext<PropositionContext>(0);
		}
		public NotExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPropositionalLogicListener typedListener = listener as IPropositionalLogicListener;
			if (typedListener != null) typedListener.EnterNotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPropositionalLogicListener typedListener = listener as IPropositionalLogicListener;
			if (typedListener != null) typedListener.ExitNotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPropositionalLogicVisitor<TResult> typedVisitor = visitor as IPropositionalLogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NotExpressionContext notExpression() {
		NotExpressionContext _localctx = new NotExpressionContext(Context, State);
		EnterRule(_localctx, 14, RULE_notExpression);
		try {
			State = 70;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NOT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 63;
				Match(NOT);
				State = 64;
				notExpression();
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 65;
				Match(LPAREN);
				State = 66;
				expression();
				State = 67;
				Match(RPAREN);
				}
				break;
			case PROPOSITION:
				EnterOuterAlt(_localctx, 3);
				{
				State = 69;
				proposition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropositionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROPOSITION() { return GetToken(PropositionalLogicParser.PROPOSITION, 0); }
		public PropositionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proposition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPropositionalLogicListener typedListener = listener as IPropositionalLogicListener;
			if (typedListener != null) typedListener.EnterProposition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPropositionalLogicListener typedListener = listener as IPropositionalLogicListener;
			if (typedListener != null) typedListener.ExitProposition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPropositionalLogicVisitor<TResult> typedVisitor = visitor as IPropositionalLogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProposition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropositionContext proposition() {
		PropositionContext _localctx = new PropositionContext(Context, State);
		EnterRule(_localctx, 16, RULE_proposition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72;
			Match(PROPOSITION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,13,75,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,2,5,2,27,8,2,10,2,12,2,30,9,
		2,1,3,1,3,1,3,5,3,35,8,3,10,3,12,3,38,9,3,1,4,1,4,1,4,5,4,43,8,4,10,4,
		12,4,46,9,4,1,5,1,5,1,5,5,5,51,8,5,10,5,12,5,54,9,5,1,6,1,6,1,6,5,6,59,
		8,6,10,6,12,6,62,9,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,71,8,7,1,8,1,8,1,
		8,0,0,9,0,2,4,6,8,10,12,14,16,0,0,72,0,18,1,0,0,0,2,21,1,0,0,0,4,23,1,
		0,0,0,6,31,1,0,0,0,8,39,1,0,0,0,10,47,1,0,0,0,12,55,1,0,0,0,14,70,1,0,
		0,0,16,72,1,0,0,0,18,19,3,2,1,0,19,20,5,0,0,1,20,1,1,0,0,0,21,22,3,4,2,
		0,22,3,1,0,0,0,23,28,3,6,3,0,24,25,5,4,0,0,25,27,3,6,3,0,26,24,1,0,0,0,
		27,30,1,0,0,0,28,26,1,0,0,0,28,29,1,0,0,0,29,5,1,0,0,0,30,28,1,0,0,0,31,
		36,3,8,4,0,32,33,5,3,0,0,33,35,3,8,4,0,34,32,1,0,0,0,35,38,1,0,0,0,36,
		34,1,0,0,0,36,37,1,0,0,0,37,7,1,0,0,0,38,36,1,0,0,0,39,44,3,10,5,0,40,
		41,5,6,0,0,41,43,3,10,5,0,42,40,1,0,0,0,43,46,1,0,0,0,44,42,1,0,0,0,44,
		45,1,0,0,0,45,9,1,0,0,0,46,44,1,0,0,0,47,52,3,12,6,0,48,49,5,8,0,0,49,
		51,3,12,6,0,50,48,1,0,0,0,51,54,1,0,0,0,52,50,1,0,0,0,52,53,1,0,0,0,53,
		11,1,0,0,0,54,52,1,0,0,0,55,60,3,14,7,0,56,57,5,5,0,0,57,59,3,14,7,0,58,
		56,1,0,0,0,59,62,1,0,0,0,60,58,1,0,0,0,60,61,1,0,0,0,61,13,1,0,0,0,62,
		60,1,0,0,0,63,64,5,7,0,0,64,71,3,14,7,0,65,66,5,9,0,0,66,67,3,2,1,0,67,
		68,5,10,0,0,68,71,1,0,0,0,69,71,3,16,8,0,70,63,1,0,0,0,70,65,1,0,0,0,70,
		69,1,0,0,0,71,15,1,0,0,0,72,73,5,1,0,0,73,17,1,0,0,0,6,28,36,44,52,60,
		70
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
